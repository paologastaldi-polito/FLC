
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.*;
import java.util.function.*;
import java.lang.Object;
import java.lang.Math;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\004\000\002\005\004" +
    "\000\002\006\003\000\002\006\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\004\000\002\010\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\003" +
    "\000\002\012\003\000\002\012\005\000\002\013\003\000" +
    "\002\013\005\000\002\014\003\000\002\011\003\000\002" +
    "\011\003\000\002\015\005\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\016\004\021\005\013\006\004\007\020\015" +
    "\014\016\016\001\002\000\022\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\017\060\021\uffee\001\002\000" +
    "\020\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9" +
    "\021\ufff9\001\002\000\020\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\021\ufff8\001\002\000\004\021\057" +
    "\001\002\000\004\022\056\001\002\000\020\011\043\012" +
    "\045\013\046\014\047\015\044\016\042\021\ufffb\001\002" +
    "\000\020\004\ufffe\005\ufffe\006\ufffe\007\ufffe\015\ufffe\016" +
    "\ufffe\022\ufffe\001\002\000\022\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\040\021\uffe9\001\002\000" +
    "\016\004\021\005\026\006\035\007\020\015\014\016\016" +
    "\001\002\000\020\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\021\uffef\001\002\000\016\004\021\005\026" +
    "\006\035\007\020\015\014\016\016\001\002\000\004\002" +
    "\034\001\002\000\006\004\021\005\026\001\002\000\024" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\020\uffe8\021\uffe8\001\002\000\020\004\021\005\013" +
    "\006\004\007\020\015\014\016\016\022\uffff\001\002\000" +
    "\004\021\ufffa\001\002\000\020\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\015\ufffd\016\ufffd\022\ufffd\001\002\000\006\010" +
    "\uffec\020\uffec\001\002\000\024\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\021\uffe9\001" +
    "\002\000\006\010\uffea\020\uffea\001\002\000\006\010\032" +
    "\020\031\001\002\000\006\004\021\005\026\001\002\000" +
    "\020\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\021\uffed\001\002\000\006\010\uffeb\020\uffeb\001\002\000" +
    "\004\002\001\001\002\000\020\011\uffee\012\uffee\013\uffee" +
    "\014\uffee\015\uffee\016\uffee\021\uffee\001\002\000\020\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\021\ufff6" +
    "\001\002\000\020\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\021\ufff7\001\002\000\016\004\021\005\026" +
    "\006\035\007\020\015\014\016\016\001\002\000\020\011" +
    "\043\012\045\013\046\014\047\015\044\016\042\021\uffe7" +
    "\001\002\000\016\004\021\005\026\006\035\007\020\015" +
    "\014\016\016\001\002\000\016\004\021\005\026\006\035" +
    "\007\020\015\014\016\016\001\002\000\016\004\021\005" +
    "\026\006\035\007\020\015\014\016\016\001\002\000\016" +
    "\004\021\005\026\006\035\007\020\015\014\016\016\001" +
    "\002\000\016\004\021\005\026\006\035\007\020\015\014" +
    "\016\016\001\002\000\016\004\021\005\026\006\035\007" +
    "\020\015\014\016\016\001\002\000\020\011\043\012\045" +
    "\013\046\014\ufff0\015\ufff0\016\ufff0\021\ufff0\001\002\000" +
    "\020\011\043\012\045\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\021\ufff3\001\002\000\020\011\043\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\021\ufff4\001\002\000\020\011\043" +
    "\012\045\013\046\014\047\015\ufff2\016\ufff2\021\ufff2\001" +
    "\002\000\020\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\021\ufff5\001\002\000\020\011\043\012\045\013" +
    "\046\014\047\015\044\016\ufff1\021\ufff1\001\002\000\004" +
    "\002\000\001\002\000\020\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\015\ufffc\016\ufffc\022\ufffc\001\002\000\016\004\021" +
    "\005\026\006\035\007\020\015\014\016\016\001\002\000" +
    "\020\011\043\012\045\013\046\014\047\015\044\016\042" +
    "\021\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\057\000\026\002\016\003\007\004\021\005\011\006" +
    "\006\007\010\010\014\011\004\012\005\015\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\036\011\004\012" +
    "\005\001\001\000\002\001\001\000\010\010\035\011\004" +
    "\012\005\001\001\000\002\001\001\000\010\011\026\013" +
    "\027\014\024\001\001\000\002\001\001\000\020\005\023" +
    "\006\006\007\010\010\014\011\004\012\005\015\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\026\014\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\040\010\014\011\004" +
    "\012\005\001\001\000\002\001\001\000\012\007\054\010" +
    "\014\011\004\012\005\001\001\000\012\007\053\010\014" +
    "\011\004\012\005\001\001\000\012\007\052\010\014\011" +
    "\004\012\005\001\001\000\012\007\051\010\014\011\004" +
    "\012\005\001\001\000\012\007\050\010\014\011\004\012" +
    "\005\001\001\000\012\007\047\010\014\011\004\012\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\060\010" +
    "\014\011\004\012\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTable = new HashMap<String, Double[]>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.println("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.println(" (linea "+line+", colonna "+column+"): " + message);
            } else System.err.println(": " + message);
        else System.err.println(": " + message);
    }
    
    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Global variables
    public HashMap <String, Double[]>symbolTable;

    public Double[] perform(Double[] v1, Double[] v2, DoubleBinaryOperator action) {
        // int maxSize = v1.length>v2.length ? v1.length:v2.length;
        int maxSize = Math.max(v1.length, v2.length);
        Double[] res = new Double[maxSize];
        for(int i=0; i < maxSize; i++) {
            Double op1 = (v1.length == 1 ? v1[0] : v1[i]);
            Double op2 = (v2.length == 1 ? v2[0] : v2[i]);

            res[i] = action.applyAsDouble(op1, op2);
            // System.out.println(op1 + " action " + op2 + " = " + res[i]); // debug
        }
        return res;
    }

    public String toString(Double[] v) {
        StringBuffer s = new StringBuffer();
        int i;

        s.append("[ ");
        for(i=0; i < v.length -1; i++){
            s.append(v[i] + ", ");
        }
        s.append(v[i] + " ]");

        return s.toString();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= session EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // session ::= session_base QM 
            { parser.Tree.reduce(2,"session",0);
              Object RESULT =null;
		 System.out.println("--- CORRECT END ---"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("session",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // session_base ::= operation_list 
            { parser.Tree.reduce(1,"session_base",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("session_base",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operation_list ::= operation 
            { parser.Tree.reduce(1,"operation_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operation_list ::= operation_list operation 
            { parser.Tree.reduce(2,"operation_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= operation_base S 
            { parser.Tree.reduce(2,"operation",0);
              Double[] RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation_base ::= exp 
            { parser.Tree.reduce(1,"operation_base",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("= " + parser.toString(v)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_base",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation_base ::= assign 
            { parser.Tree.reduce(1,"operation_base",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("assignment = " + parser.toString(v)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operation_base",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operand ::= scalar 
            { parser.Tree.reduce(1,"operand",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operand ::= vector 
            { parser.Tree.reduce(1,"operand",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operand ::= ADD operand 
            { parser.Tree.reduce(2,"operand",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operand ::= SUB operand 
            { parser.Tree.reduce(2,"operand",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp POW exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = parser.perform(o1, o2, (a, b) -> (Math.pow(a, b)));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp MUL exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = parser.perform(o1, o2, (a, b) -> (a * b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp DIV exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = parser.perform(o1, o2, (a, b) -> (a / b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp ADD exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(o1.length != o2.length)
                parser.report_error("VECTOR SIZES MUST BE EQUAL!", parser.getToken());
            else
                RESULT = parser.perform(o1, o2, (a, b) -> (a + b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp SUB exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(o1.length != o2.length)
                parser.report_error("VECTOR SIZES MUST BE EQUAL!", parser.getToken());
            else
                RESULT = parser.perform(o1, o2, (a, b) -> (a - b));
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp DOT exp 
            { parser.Tree.reduce(3,"exp",0);
              Double[] RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] o1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int o2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int o2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(o1.length != o2.length)
                parser.report_error("VECTOR SIZES MUST BE EQUAL!", parser.getToken());
            else {
                Double[] mulRes = parser.perform(o1, o2, (a, b) -> (a * b));
                Double[] accum = new Double[1];
                accum[0] = 0.0;
                for(Double d : mulRes)
                    accum[0] += d;
                RESULT = accum;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= operand 
            { parser.Tree.reduce(1,"exp",0);
              Double[] RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] o = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = o; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vector ::= VET 
            { parser.Tree.reduce(1,"vector",0);
              Double[] RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.symbolTable.get(k); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vector ::= SO arg_list SC 
            { parser.Tree.reduce(3,"vector",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arg_list ::= arg 
            { parser.Tree.reduce(1,"arg_list",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arg_list ::= arg_list CM arg 
            { parser.Tree.reduce(3,"arg_list",0);
              Double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] v1 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v2 = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Double[] res = Arrays.copyOf(v1, v1.length +1);
            res[v1.length] = v2[0];
            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg ::= scalar 
            { parser.Tree.reduce(1,"arg",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arg",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // scalar ::= VAR 
            { parser.Tree.reduce(1,"scalar",0);
              Double[] RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = parser.symbolTable.get(k); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // scalar ::= REAL 
            { parser.Tree.reduce(1,"scalar",0);
              Double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Double[] res = new Double[1];
            res[0] = v;
            RESULT = res;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // assign ::= VAR EQ exp 
            { parser.Tree.reduce(3,"assign",0);
              Double[] RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            if(v.length == 1)
                parser.symbolTable.put(k, v); // if already exists, it will be replaced
            else
                parser.report_error("UNABLE TO ASSIGN A VECTOR TO A SCALAR", parser.getToken());

            RESULT = v;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // assign ::= VET EQ exp 
            { parser.Tree.reduce(3,"assign",0);
              Double[] RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] v = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            parser.symbolTable.put(k, Arrays.copyOf(v, v.length));
            RESULT = v;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
