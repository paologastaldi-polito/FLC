
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\034\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\005\004\000\002\006\006\000\002\006\006\000\002" +
    "\006\006\000\002\007\005\000\002\007\005\000\002\010" +
    "\003\000\002\010\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\012\005\000\002\013\003\000" +
    "\002\013\003\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\016\002\ufffd\003\013\004\004\005\014\006" +
    "\017\010\012\001\002\000\014\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\001\002\000\016\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\010\ufffa\001\002\000\016\002\001" +
    "\003\013\004\004\005\014\006\017\010\012\001\002\000" +
    "\012\004\004\005\014\006\017\007\050\001\002\000\004" +
    "\002\044\001\002\000\014\011\uffef\012\uffef\013\uffef\014" +
    "\043\015\uffef\001\002\000\012\003\037\004\004\005\014" +
    "\006\017\001\002\000\006\011\033\012\034\001\002\000" +
    "\014\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\001\002" +
    "\000\016\002\uffff\003\uffff\004\uffff\005\uffff\006\uffff\010" +
    "\uffff\001\002\000\016\002\ufffb\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\010\ufffb\001\002\000\014\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\001\002\000\006\011\022\012\023" +
    "\001\002\000\016\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\010\ufffc\001\002\000\012\003\025\004\004\005\014" +
    "\006\017\001\002\000\016\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\010\ufff9\001\002\000\006\012\ufff2\013\ufff2" +
    "\001\002\000\004\012\032\001\002\000\006\012\030\013" +
    "\027\001\002\000\010\004\004\005\014\006\017\001\002" +
    "\000\016\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\010" +
    "\ufff7\001\002\000\006\012\ufff1\013\ufff1\001\002\000\016" +
    "\002\ufff5\003\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5\001" +
    "\002\000\010\004\004\005\014\006\017\001\002\000\016" +
    "\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\010\ufff8\001" +
    "\002\000\006\012\036\013\027\001\002\000\016\002\ufff6" +
    "\003\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6\001\002\000" +
    "\004\012\042\001\002\000\006\012\041\013\027\001\002" +
    "\000\016\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4\010" +
    "\ufff4\001\002\000\016\002\ufff3\003\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\010\ufff3\001\002\000\012\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\001\002\000\004\002\000\001\002\000\006" +
    "\013\uffee\015\uffee\001\002\000\006\013\uffec\015\uffec\001" +
    "\002\000\006\013\052\015\053\001\002\000\006\013\uffe6" +
    "\015\uffe6\001\002\000\006\013\uffeb\015\uffeb\001\002\000" +
    "\012\004\004\005\014\006\017\007\050\001\002\000\012" +
    "\011\ufff0\012\ufff0\013\ufff0\015\ufff0\001\002\000\006\013" +
    "\uffed\015\uffed\001\002\000\016\002\ufffe\003\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\010\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\024\002\007\003\005\004\014\005\020\006" +
    "\015\007\004\011\017\014\006\015\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\054\005\020\006" +
    "\015\007\004\011\017\014\006\015\010\001\001\000\016" +
    "\011\050\012\046\013\044\014\006\015\010\016\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\037" +
    "\011\023\014\006\015\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\025\011\023\014\006\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\011\030\014\006\015\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\034\011" +
    "\023\014\006\015\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\050\013\053\014\006\015\010\016\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.println(" (linea "+line+", colonna "+column+"): " + message);
            } else System.err.println(": " + message);
        else System.err.println(": " + message);
    }
    
    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Global variables
    public boolean fact_found = false;
    public boolean interrogation_found = false;
    public boolean error_found = false;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= component_list 
            { parser.Tree.reduce(1,"program",0);
              Object RESULT =null;
		
        if(!fact_found){
            parser.report_error("AT LEAST ONE FACT IS EXPECTED!", parser.getToken());
            parser.error_found = true;
        }
        if(!interrogation_found){
            parser.report_error("AT LEAST ONE INTERROGATION IS EXPECTED!", parser.getToken());
            parser.error_found = true;
        }

        if(parser.error_found)
            return(null);

        System.out.println("CORRECT!");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // component_list ::= component 
            { parser.Tree.reduce(1,"component_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // component_list ::= component_list component 
            { parser.Tree.reduce(2,"component_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // component_list ::= 
            { parser.Tree.reduce(0,"component_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // component ::= fact 
            { parser.Tree.reduce(1,"component",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // component ::= rule 
            { parser.Tree.reduce(1,"component",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // component ::= interrogation 
            { parser.Tree.reduce(1,"component",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fact ::= predicate DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT =null;
		
        parser.fact_found = true;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fact ::= error DOT 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT =null;
		
            parser.report_error("INCORRECT FACT PREDICATE LIST!", parser.getToken());
            parser.error_found = true;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fact",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rule ::= predicate COL_DASH predicate_list DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // rule ::= error COL_DASH predicate_list DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT =null;
		
            parser.report_error("INCORRECT RULE PREDICATE!", parser.getToken());
            parser.error_found = true;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // rule ::= predicate COL_DASH error DOT 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT =null;
		
            parser.report_error("INCORRECT RULE PREDICATE LIST!", parser.getToken());
            parser.error_found = true;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rule",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // interrogation ::= QM_DASH predicate_list DOT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT =null;
		
        if(parser.interrogation_found){
            parser.report_error("ONLY ONE INTERROGATION IS EXPECTED!", parser.getToken());
            parser.error_found = true;
        }
        else
            parser.interrogation_found = true;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interrogation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // interrogation ::= QM_DASH error DOT 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT =null;
		
            parser.report_error("INCORRECT INTERROGATION PREDICATE LIST!", parser.getToken());
            parser.error_found = true;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("interrogation",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate_list ::= predicate 
            { parser.Tree.reduce(1,"predicate_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // predicate_list ::= predicate_list CM predicate 
            { parser.Tree.reduce(3,"predicate_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // predicate ::= functor argument_list RC 
            { parser.Tree.reduce(3,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // predicate ::= atom 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("predicate",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argument_list ::= argument 
            { parser.Tree.reduce(1,"argument_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument_list ::= argument_list CM argument 
            { parser.Tree.reduce(3,"argument_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argument ::= variable 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argument",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // functor ::= atom RO 
            { parser.Tree.reduce(2,"functor",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // atom ::= ATOM_STRING 
            { parser.Tree.reduce(1,"atom",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // atom ::= REAL 
            { parser.Tree.reduce(1,"atom",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // atom ::= INT 
            { parser.Tree.reduce(1,"atom",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable ::= VAR_STRING 
            { parser.Tree.reduce(1,"variable",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
